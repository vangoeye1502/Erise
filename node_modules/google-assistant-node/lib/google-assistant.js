"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var events = require("events");
var constants = require("./constants");
var audio_converter_1 = require("./audio-converter");
var constants_1 = require("./constants");
var grpc = require('grpc');
var messages = require('./googleapis/google/assistant/embedded/v1alpha1/embedded_assistant_pb');
var services = require('./googleapis/google/assistant/embedded/v1alpha1/embedded_assistant_grpc_pb');
var GoogleAssistant = (function (_super) {
    __extends(GoogleAssistant, _super);
    function GoogleAssistant(config) {
        var _this = _super.call(this) || this;
        _this.converter = new audio_converter_1.default();
        _this.converseConfig = new messages.ConverseConfig();
        _this.audioInConfig = new messages.AudioInConfig();
        _this.audioOutConfig = new messages.AudioOutConfig();
        _this.setInputConfig(config.input);
        _this.setOutputConfig(config.output);
        return _this;
    }
    GoogleAssistant.prototype.setInputConfig = function (config) {
        this.audioInConfig.setEncoding(config.encoding);
        this.audioInConfig.setSampleRateHertz(config.sampleRateHertz);
        this._updateConverseConfig();
    };
    GoogleAssistant.prototype.setOutputConfig = function (config) {
        this.audioOutConfig.setEncoding(config.encoding);
        this.audioOutConfig.setSampleRateHertz(config.sampleRateHertz);
        this.audioOutConfig.setVolumePercentage(config.volumePercentage);
        this._updateConverseConfig();
    };
    GoogleAssistant.prototype._updateConverseConfig = function () {
        this.converseConfig.setAudioInConfig(this.audioInConfig);
        this.converseConfig.setAudioOutConfig(this.audioOutConfig);
    };
    GoogleAssistant.prototype.authenticate = function (authClient) {
        var ssl_creds = grpc.credentials.createSsl();
        var call_creds = grpc.credentials.createFromGoogleCredential(authClient);
        var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);
        this.service = new services.EmbeddedAssistantClient(constants_1.API.ENDPOINT, combined_creds);
    };
    GoogleAssistant.prototype.converse = function () {
        var _this = this;
        if (this.conversationState != null) {
            this.converseConfig.setConverseState(this.conversationState);
            this.conversationState = null;
        }
        var request = new messages.ConverseRequest();
        request.setConfig(this.converseConfig);
        this.channel = this.service.converse(new grpc.Metadata(), request);
        // Setup event listeners
        this.channel.on('data', this._handleResponse.bind(this));
        this.channel.on('data', this._handleConversationState.bind(this));
        this.channel.on('error', this._handleError.bind(this));
        this.channel.on('end', this._handleConversationEnd.bind(this));
        // Write first ConverseRequest
        this.channel.write(request);
        this.state = constants_1.State.IN_PROGRESS;
        // Wait for any errors to emerge before piping
        // audio data
        setTimeout(function () {
            if (_this.channel != null) {
                // Setup conversion stream
                _this.converter
                    .pipe(_this.channel)
                    .on('error', _this._handleError.bind(_this));
                // Signal that assistant is ready
                _this.emit('ready', _this.converter);
            }
        }, 100);
    };
    GoogleAssistant.prototype._handleResult = function (result) {
        if (result.getMicrophoneMode()) {
            this.emit('mic-mode', result.getMicrophoneMode());
        }
        if (result.getConversationState()) {
            this.emit('state', new Buffer(result.getConversationState()));
        }
        if (result.getSpokenResponseText()) {
            this.emit('response-text', result.getSpokenResponseText());
        }
        if (result.getSpokenRequestText()) {
            this.emit('request-text', result.getSpokenRequestText());
        }
    };
    GoogleAssistant.prototype._handleResponse = function (response) {
        if (response.hasEventType() &&
            response.getEventType() == constants_1.Event.END_OF_UTTERANCE) {
            this.emit('end-of-utterance');
        }
        else if (response.hasAudioOut()) {
            this.emit('audio-data', new Buffer(response.getAudioOut().getAudioData()));
        }
        else if (response.hasResult()) {
            this._handleResult(response.getResult());
        }
        else if (response.hasError()) {
            this.emit('error', response.getError());
        }
    };
    GoogleAssistant.prototype._handleConversationState = function (response) {
        // Handle end of user input
        if (response.getEventType() == constants_1.Event.END_OF_UTTERANCE) {
            this.state = constants_1.State.FINISHED;
        }
        // Handle continous conversations
        if (response.hasResult() && response.getResult().getConversationState()) {
            var convState = new messages.ConverseState();
            convState.setConversationState(response.getResult().getConversationState());
            this.conversationState = convState;
        }
    };
    GoogleAssistant.prototype._handleConversationEnd = function () {
        this.emit('end');
    };
    GoogleAssistant.prototype._handleError = function (error) {
        if (this.channel != null) {
            this.channel.end();
            this.channel = null;
        }
        if (error.code && error.code == grpc.status.UNAUTHENTICATED) {
            this.emit('unauthorized', error);
        }
        else {
            this.emit('error', error);
        }
    };
    return GoogleAssistant;
}(events.EventEmitter));
GoogleAssistant.Constants = constants;
module.exports = GoogleAssistant;
//# sourceMappingURL=google-assistant.js.map